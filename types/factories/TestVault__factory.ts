/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";

import type { TestVault } from "../TestVault";

export class TestVault__factory extends ContractFactory {
  constructor(signer?: Signer) {
    super(_abi, _bytecode, signer);
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<TestVault> {
    return super.deploy(overrides || {}) as Promise<TestVault>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): TestVault {
    return super.attach(address) as TestVault;
  }
  connect(signer: Signer): TestVault__factory {
    return super.connect(signer) as TestVault__factory;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): TestVault {
    return new Contract(address, _abi, signerOrProvider) as TestVault;
  }
}

const _abi = [
  {
    stateMutability: "nonpayable",
    type: "fallback",
  },
  {
    inputs: [],
    name: "pool",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "enum TestVault.PoolSpecialization",
        name: "",
        type: "uint8",
      },
    ],
    name: "registerPool",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
      {
        internalType: "address[]",
        name: "",
        type: "address[]",
      },
      {
        internalType: "address[]",
        name: "",
        type: "address[]",
      },
    ],
    name: "registerTokens",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_pool",
        type: "address",
      },
    ],
    name: "setPool",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b506102ae806100206000396000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c806309b2760f1461007757806316f0115b146100a95780634437152a146100cd57806366a9c7d2146100f5575b3660008037600080366000346000545af18061006c573d6000803e3d6000fd5b503d6000803e3d6000f35b6100976004803603602081101561008d57600080fd5b503560ff16610223565b60408051918252519081900360200190f35b6100b1610242565b604080516001600160a01b039092168252519081900360200190f35b6100f3600480360360208110156100e357600080fd5b50356001600160a01b0316610251565b005b6100f36004803603606081101561010b57600080fd5b8135919081019060408101602082013564010000000081111561012d57600080fd5b82018360208201111561013f57600080fd5b8035906020019184602083028401116401000000008311171561016157600080fd5b91908080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525092959493602081019350359150506401000000008111156101b157600080fd5b8201836020820111156101c357600080fd5b803590602001918460208302840111640100000000831117156101e557600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250929550610273945050505050565b600080546001600160a01b03191633179055630307830360e41b919050565b6000546001600160a01b031681565b600080546001600160a01b0319166001600160a01b0392909216919091179055565b50505056fea26469706673582212203f92d9957229333b75f4810369d7bfbbe726b728281b89376b8cc2f9d87a917764736f6c63430007010033";
