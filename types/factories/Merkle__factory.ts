/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";

import type { Merkle } from "../Merkle";

export class Merkle__factory extends ContractFactory {
  constructor(signer?: Signer) {
    super(_abi, _bytecode, signer);
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<Merkle> {
    return super.deploy(overrides || {}) as Promise<Merkle>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): Merkle {
    return super.attach(address) as Merkle;
  }
  connect(signer: Signer): Merkle__factory {
    return super.connect(signer) as Merkle__factory;
  }
  static connect(address: string, signerOrProvider: Signer | Provider): Merkle {
    return new Contract(address, _abi, signerOrProvider) as Merkle;
  }
}

const _abi = [
  {
    inputs: [],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "getRoot",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "hashes",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32[]",
        name: "proof",
        type: "bytes32[]",
      },
      {
        internalType: "bytes32",
        name: "root",
        type: "bytes32",
      },
      {
        internalType: "bytes32",
        name: "leaf",
        type: "bytes32",
      },
      {
        internalType: "uint256",
        name: "index",
        type: "uint256",
      },
    ],
    name: "verify",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b50610019610388565b506040805160c081018252600c608082019081526b30b634b1b290169f103137b160a11b60a0830152815281518083018352600b8082526a626f62202d3e206461766560a81b6020838101919091528084019290925283518085018552600e81526d6361726f6c202d3e20616c69636560901b8184015283850152835180850190945283526a3230bb3290169f103137b160a91b90830152606081019190915260005b60048110156101655760008282600481106100d357fe5b60200201516040516020018082805190602001908083835b6020831061010a5780518252601f1990920191602091820191016100eb565b51815160209384036101000a60001901801990921691161790526040805192909401828103601f19018352909352805190830120855460018082018855600097885293909620909501949094559390930192506100bc915050565b50600460005b811561024f576101a1604051806040016040528060038152602001620371d160ed1b815250838361025760201b6102391760201c565b60005b60018303811015610243576101c3828261031760201b6102f41760201c565b600080828401815481106101d357fe5b90600052602060002001546000838501600101815481106101f057fe5b6000918252602080832090910154604080518084019590955284810191909152805180850382018152606090940190528251928101929092208354600181018555938252919020909101556002016101a4565b5060028204910161016b565b5050506103af565b6103128383836040516024018080602001848152602001838152602001828103825285818151815260200191508051906020019080838360005b838110156102a9578181015183820152602001610291565b50505050905090810190601f1680156102d65780820380516001836020036101000a031916815260200191505b5060408051601f198184030181529190526020810180516001600160e01b0390811663969cdd0360e01b17909152909550610367169350505050565b505050565b604080516024810184905260448082018490528251808303909101815260649091019091526020810180516001600160e01b0390811662d81ed360e71b17909152610363919061036716565b5050565b80516a636f6e736f6c652e6c6f67602083016000808483855afa5050505050565b60405180608001604052806004905b60608152602001906001900390816103975790505090565b610396806103be6000396000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c806321fb335c14610046578063501895ae146101085780635ca1e16514610137575b600080fd5b6100f46004803603608081101561005c57600080fd5b81019060208101813564010000000081111561007757600080fd5b82018360208201111561008957600080fd5b803590602001918460208302840111640100000000831117156100ab57600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250929550508235935050506020810135906040013561013f565b604080519115158252519081900360200190f35b6101256004803603602081101561011e57600080fd5b50356101f7565b60408051918252519081900360200190f35b610125610215565b600082815b86518110156101eb57600087828151811061015b57fe5b602002602001015190506002858161016f57fe5b066101aa57828160405160200180838152602001828152602001925050506040516020818303038152906040528051906020012092506101dc565b808360405160200180838152602001828152602001925050506040516020818303038152906040528051906020012092505b60028504945050600101610144565b50909314949350505050565b6000818154811061020457fe5b600091825260209091200154905081565b600080548190600019810190811061022957fe5b9060005260206000200154905090565b6102ef8383836040516024018080602001848152602001838152602001828103825285818151815260200191508051906020019080838360005b8381101561028b578181015183820152602001610273565b50505050905090810190601f1680156102b85780820380516001836020036101000a031916815260200191505b5060408051601f198184030181529190526020810180516001600160e01b031663969cdd0360e01b179052945061033f9350505050565b505050565b604080516024810184905260448082018490528251808303909101815260649091019091526020810180516001600160e01b031662d81ed360e71b17905261033b9061033f565b5050565b80516a636f6e736f6c652e6c6f67602083016000808483855afa505050505056fea2646970667358221220fd3688dbd4f48b27a489619190b78b45e9555ccc2a8c776533497c0662b5764b64736f6c63430007010033";
